# pages/explain.py
import os
import streamlit as st
import plotly.graph_objects as go
import gdown
import h2o

# =======================
# CONFIG INICIAL
# =======================
st.set_page_config(page_title="üß† Explica√ß√£o do Modelo", layout="wide")

ASSETS = "assets"
def first_existing(*names):
    for n in names:
        for base in (".", ASSETS):
            p = os.path.join(base, n)
            if os.path.exists(p):
                return p
    return None

LOGO = first_existing("logo.png", "logo.jpg", "logo.jpeg", "logo.webp")

# =======================
# CABE√áALHO
# =======================
st.markdown(
    """
    <div style='background: linear-gradient(to right, #004e92, #000428);
                padding: 40px; border-radius: 12px; margin-bottom:30px'>
        <h1 style='color: white; margin: 0;'>üß† Explica√ß√£o do Modelo</h1>
        <p style='color: white; font-size:16px; margin-top:8px;'>
            Predi√ß√£o de sobrevida em pacientes oncol√≥gicos na emerg√™ncia ‚Äì como o modelo foi constru√≠do,
            como performa e como interpretar suas sa√≠das.
        </p>
    </div>
    """,
    unsafe_allow_html=True,
)

# Oculta a navega√ß√£o padr√£o do Streamlit na sidebar
st.markdown(
    """
    <style>
    [data-testid="stSidebarNav"] { display: none; }
    </style>
    """,
    unsafe_allow_html=True
)

# =======================
# MENU LATERAL
# =======================
with st.sidebar:
    if LOGO:
        st.image(LOGO, use_container_width=True)
    st.markdown("<hr style='border:none;border-top:1px solid #ccc;'/>", unsafe_allow_html=True)
    st.header("Menu")
    st.page_link("app.py", label="Predi√ß√£o no PoC", icon="üìà")
    # use sempre o caminho com 'pages/' para evitar StreamlitPageNotFoundError
    st.page_link("pages/explain.py", label="Explica√ß√£o do Modelo", icon="üß†")

    st.markdown("<hr style='border:none;border-top:1px solid #ccc;'/>", unsafe_allow_html=True)
    st.subheader("Conecte-se")
    st.markdown("""
- üíº [LinkedIn](https://www.linkedin.com/in/gregorio-healthdata/)
- ‚ñ∂Ô∏è [YouTube](https://www.youtube.com/@Patients2Python)
- üì∏ [Instagram](https://www.instagram.com/patients2python/)
- üåê [Site](https://patients2python.com.br/)
- üêô [GitHub](https://github.com/gregrodrigues22)
- üë•üí¨ [Comunidade](https://chat.whatsapp.com/CBn0GBRQie5B8aKppPigdd)
- ü§ùüí¨ [WhatsApp](https://patients2python.sprinthub.site/r/whatsapp-olz)
- üéì [Escola](https://app.patients2python.com.br/browse)
    """, unsafe_allow_html=True)

# =======================
# CONTEXTO E OBJETIVO
# =======================
st.subheader("Contexto cl√≠nico e motiva√ß√£o")
st.markdown("""
A transi√ß√£o do cuidado **curativo para o paliativo** segue desafiadora na emerg√™ncia oncol√≥gica.  
Com frequ√™ncia h√° **superestima√ß√£o da sobrevida**, atrasando discuss√µes de metas e acesso oportuno a CP.
O modelo busca **apoiar decis√µes** usando vari√°veis **rotineiras da admiss√£o** (sinais vitais, prioridade/status,
diagn√≥stico por CID, ECOG da √∫ltima consulta eletiva, idade, antropometria e hist√≥rico recente).
""")
st.info("**Uso cl√≠nico**: ferramenta de apoio ‚Äî **n√£o substitui** julgamento m√©dico. Integre sempre com exame, prefer√™ncias do paciente/fam√≠lia e diretrizes.")

# =======================
# CARREGAMENTO DO MODELO (CACHE)
# =======================
@st.cache_resource(show_spinner=True)
def load_mojo_model():
    file_id = "1IEGIuHt1l8xwR_Jl5J_fuKf0h5Fkdwx2"
    url = f"https://drive.google.com/uc?id={file_id}"
    mojo_path = "modelo_em_mojo.zip"
    if not os.path.exists(mojo_path):
        gdown.download(url, mojo_path, quiet=True)
    h2o.init()
    return h2o.import_mojo(mojo_path)

with st.spinner("Carregando o modelo..."):
    try:
        model = load_mojo_model()
        st.success("‚úÖ Modelo carregado com sucesso.")
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar o modelo: {e}")
        st.stop()

# =======================
# M√âTRICAS GLOBAIS
# =======================
st.subheader("Desempenho global do modelo")

def _safe_call(obj, name, default=None, *args, **kwargs):
    try:
        fn = getattr(obj, name)
        return fn(*args, **kwargs)
    except Exception:
        return default

try:
    mp = model.model_performance()

    auc      = _safe_call(mp, "auc")
    aucpr    = _safe_call(mp, "aucpr")
    logloss  = _safe_call(mp, "logloss")
    rmse     = _safe_call(mp, "rmse")
    mse      = _safe_call(mp, "mse")
    r2       = _safe_call(mp, "r2")

    c = st.columns(6)
    c[0].metric("AUC (ROC)", f"{auc:.3f}" if auc is not None else "‚Äî")
    c[1].metric("AUCPR",     f"{aucpr:.3f}" if aucpr is not None else "‚Äî")
    c[2].metric("LogLoss",   f"{logloss:.3f}" if logloss is not None else "‚Äî")
    c[3].metric("RMSE",      f"{rmse:.3f}" if rmse is not None else "‚Äî")
    c[4].metric("MSE",       f"{mse:.3f}" if mse is not None else "‚Äî")
    c[5].metric("R¬≤",        f"{r2:.3f}" if r2 is not None else "‚Äî")

    # ROC
    st.markdown("#### Curva ROC")
    try:
        fpr, tpr = mp.roc()
        fig_roc = go.Figure()
        fig_roc.add_trace(go.Scatter(x=fpr, y=tpr, mode="lines",
                                     name=f"ROC (AUC = {auc:.3f})" if auc is not None else "ROC"))
        fig_roc.add_trace(go.Scatter(x=[0, 1], y=[0, 1], mode="lines",
                                     name="Aleat√≥rio", line=dict(dash="dash")))
        fig_roc.update_layout(xaxis_title="Falsos Positivos (FPR)",
                              yaxis_title="Verdadeiros Positivos (TPR)",
                              template="plotly_white", height=420)
        st.plotly_chart(fig_roc, use_container_width=True)
    except Exception:
        st.warning("N√£o foi poss√≠vel construir a curva ROC com este artefato.")

    # PR (Precis√£o-Revoca√ß√£o)
    st.markdown("#### Curva Precis√£o-Revoca√ß√£o (PR)")
    try:
        # precision() e recall() podem vir como Frame-like ou dict-like dependendo do artefato
        prec_tbl = _safe_call(mp, "precision")
        rec_tbl  = _safe_call(mp, "recall")

        def _extract_col(tbl, key):
            # aceita dict, H2OFrame.as_data_frame(), lista de dicts etc.
            try:
                if hasattr(tbl, "as_data_frame"):
                    df = tbl.as_data_frame()
                    return df[key].astype(float).tolist()
                if isinstance(tbl, dict):
                    return [float(x) for x in tbl[key]]
                if isinstance(tbl, list):
                    return [float(row.get(key, 0)) for row in tbl]
            except Exception:
                pass
            return None

        precisions = _extract_col(prec_tbl, "precision")
        recalls    = _extract_col(rec_tbl,  "recall")

        if precisions and recalls and len(precisions) == len(recalls):
            fig_pr = go.Figure()
            fig_pr.add_trace(go.Scatter(x=recalls, y=precisions, mode="lines+markers",
                                        name=f"PR (AUCPR = {aucpr:.3f})" if aucpr is not None else "PR"))
            fig_pr.update_layout(xaxis_title="Revoca√ß√£o (Sensibilidade)",
                                 yaxis_title="Precis√£o (PPV)",
                                 template="plotly_white", height=420)
            st.plotly_chart(fig_pr, use_container_width=True)
        else:
            st.info("N√£o foi poss√≠vel construir a curva PR com este artefato.")
    except Exception:
        st.info("N√£o foi poss√≠vel construir a curva PR com este artefato.")

    st.caption("**AUC (ROC)** mede discrimina√ß√£o global; **AUCPR** √© informativa em base desbalanceada. "
               "A ROC mostra trade-offs sens./esp.; a PR mostra trade-offs precis√£o/revoca√ß√£o.")
except Exception as e:
    st.warning(f"N√£o foi poss√≠vel calcular m√©tricas globais: {e}")

# =======================
# M√âTRICAS POR LIMIAR
# =======================
st.subheader("M√©tricas no limiar operacional (√≥timo F0.5)")

try:
    f05_tbl = _safe_call(mp, "F0point5") or _safe_call(mp, "f0point5")
    f1_tbl  = _safe_call(mp, "f1")
    prec_tbl = _safe_call(mp, "precision")
    rec_tbl  = _safe_call(mp, "recall")
    acc_tbl  = _safe_call(mp, "accuracy")
    spec_tbl = _safe_call(mp, "specificity")

    def _get_pairs(tbl, value_col):
        """Retorna pares (threshold, valor) a partir de diferentes formatos."""
        if tbl is None:
            return []
        try:
            if hasattr(tbl, "as_data_frame"):
                df = tbl.as_data_frame()
                return list(zip(df["threshold"].astype(float), df[value_col].astype(float)))
            if isinstance(tbl, dict):
                ths = [float(x) for x in tbl["threshold"]]
                vals = [float(x) for x in tbl[value_col]]
                return list(zip(ths, vals))
            if isinstance(tbl, list):
                out = []
                for row in tbl:
                    th = float(row.get("threshold", 0))
                    val = float(row.get(value_col, 0))
                    out.append((th, val))
                return out
        except Exception:
            return []
        return []

    # escolhe threshold pelo maior F0.5; fallback F1; sen√£o 0.5
    if f05_tbl:
        pairs = _get_pairs(f05_tbl, "f0point5")
        best_th, best_f05 = max(pairs, key=lambda x: x[1]) if pairs else (0.5, None)
    elif f1_tbl:
        pairs = _get_pairs(f1_tbl, "f1")
        best_th, best_f05 = (max(pairs, key=lambda x: x[1])[0], None) if pairs else (0.5, None)
    else:
        best_th, best_f05 = 0.5, None

    def _value_at(tbl, colname, th):
        pairs = _get_pairs(tbl, colname)
        if not pairs:
            return None
        # escolhe pelo threshold mais pr√≥ximo
        th0, val0 = min(pairs, key=lambda x: abs(x[0] - th))
        return val0

    precision = _value_at(prec_tbl, "precision", best_th)
    recall    = _value_at(rec_tbl,  "recall",    best_th)
    accuracy  = _value_at(acc_tbl,  "accuracy",  best_th)
    specificity = _value_at(spec_tbl, "specificity", best_th)
    f1 = _value_at(f1_tbl, "f1", best_th) if f1_tbl else None

    k = st.columns(6)
    k[0].metric("Threshold", f"{best_th:.3f}")
    k[1].metric("Precis√£o (PPV)", f"{precision:.3f}" if precision is not None else "‚Äî")
    k[2].metric("Revoca√ß√£o (Sens.)", f"{recall:.3f}" if recall is not None else "‚Äî")
    k[3].metric("Especificidade", f"{specificity:.3f}" if specificity is not None else "‚Äî")
    k[4].metric("Acur√°cia", f"{accuracy:.3f}" if accuracy is not None else "‚Äî")
    k[5].metric("F0.5", f"{best_f05:.3f}" if best_f05 is not None else "‚Äî")

    # Matriz de confus√£o (tenta o agregado mais pr√≥ximo do threshold)
    st.markdown("#### Matriz de confus√£o (no limiar selecionado)")
    try:
        cm = _safe_call(mp, "confusion_matrix")  # pode vir j√° agregada
        if cm is not None and hasattr(cm, "as_data_frame"):
            df_cm = cm.as_data_frame()
            st.dataframe(df_cm, use_container_width=True)
        else:
            st.info("Confusion matrix n√£o dispon√≠vel para este artefato.")
    except Exception:
        st.info("N√£o foi poss√≠vel recuperar a matriz de confus√£o para o limiar escolhido.")

    st.caption("Limiar escolhido pelo **m√°ximo F0.5** (quando dispon√≠vel) para priorizar **precis√£o** e reduzir falso-positivo.")
except Exception as e:
    st.warning(f"N√£o foi poss√≠vel calcular m√©tricas por limiar: {e}")

# =======================
# VARI√ÅVEIS E SHAP
# =======================
st.subheader("Vari√°veis mais relevantes e racional cl√≠nico")
st.markdown("""
- **ECOG** (√∫ltima consulta eletiva) ‚Äî maior peso; valores altos indicam pior progn√≥stico.  
- **CID oncol√≥gico** ‚Äî s√≠tio/estadiamento modulam risco basal.  
- **Sinais vitais** ‚Äî **PAM**, **FC** e **SatO‚ÇÇ** refletem gravidade na admiss√£o.  
- **TI** (tempo desde √∫ltima consulta) e **TDR** (retorno/reinterna√ß√£o recente) indicam trajet√≥ria cl√≠nica.  
- **Idade/IMC** e **status/prioridade/tend√™ncia** complementam o estrato de risco.
""")

st.markdown("#### Vis√£o global por SHAP")
shap_img = first_existing("shap_importance.png", "shap_importance.jpg", "shap_importance.webp")
if shap_img:
    st.image(shap_img, use_container_width=True, caption="Import√¢ncia das vari√°veis explicativas (valores SHAP)")
else:
    st.warning("Imagem de SHAP n√£o encontrada em assets/. Coloque 'assets/shap_importance.png'.")

# --- EXPLICA√á√ÉO DID√ÅTICA DOS SHAP (texto solicitado) ---
st.markdown("""
##### Como ler o gr√°fico SHAP

**O que o gr√°fico mostra?**  
Ele indica **como cada vari√°vel contribui** para as previs√µes do modelo. **Cada ponto** √© um valor SHAP de uma observa√ß√£o.

**Elementos do gr√°fico**  
- **Eixo Y ‚Äî Nome das vari√°veis**: listadas do topo para a base **em ordem de import√¢ncia**. Mais no topo ‚áí maior influ√™ncia.  
- **Eixo X ‚Äî Valor SHAP**: magnitude e **dire√ß√£o do impacto** na previs√£o.  
  - Valores **positivos** deslocam a predi√ß√£o para **maior probabilidade** da **classe-alvo** (Baixa Sobrevida).  
  - Valores **negativos** deslocam para **menor probabilidade** da classe-alvo (Longa Sobrevida).  
- **Cores ‚Äî Valor normalizado da vari√°vel**:  
  - **Azul** = valores **baixos**; **Rosa** = valores **altos**.  
  Isso ajuda a relacionar **n√≠vel da vari√°vel** ‚Üî **efeito no risco**.

**Como interpretar?**  
- Vari√°veis com **maior dispers√£o horizontal** (pontos mais espalhados no eixo X) t√™m **maior impacto**.  
- Se os pontos de uma vari√°vel est√£o predominantemente **√† direita** (SHAP positivos), ela tende a **aumentar** a chance da classe predita.  
- Se est√£o **√† esquerda** (SHAP negativos), tende a **reduzir** essa chance.  
- **Sobreposi√ß√£o de cores** indica rela√ß√µes possivelmente **n√£o lineares**.

**Aplica√ß√µes cl√≠nicas no nosso modelo**  
- **ECOG**: valores mais altos refletem pior estado funcional ‚Üí **pior sobrevida**. √â esperado que seja a vari√°vel mais influente.  
- **Interna√ß√£o/retorno recente (TDR)**: marca instabilidade cl√≠nica ‚Üí **pior progn√≥stico**.  
- **CID (ICD)**: diferentes s√≠tios/est√°dios t√™m pesos distintos no risco basal.  
- **Frequ√™ncia Card√≠aca (HR)**: altera√ß√µes indicam gravidade fisiol√≥gica ‚Üí influ√™ncia relevante na admiss√£o.  
- **Peso e Altura**: embora o IMC agregue a informa√ß√£o, **ainda aparece efeito adicional** de peso/altura.  
- **missing_ecog / missing_bmi**: a **aus√™ncia** de dados tamb√©m carrega informa√ß√£o (p.ex., ECOG ausente pode refletir gravidade/fluxo).  
- **Idade**: maior idade costuma se associar a **pior progn√≥stico** em oncologia.  
- **Tempo desde a √∫ltima consulta (TI)**:  
  - **Baixo TI** ‚Üí pode indicar **agravamento r√°pido** ‚Üí pior progn√≥stico;  
  - **Alto TI** ‚Üí per√≠odo est√°vel mais longo ‚Üí melhor progn√≥stico.
""")

# =======================
# DESENVOLVIMENTO / LIMITA√á√ïES / BOAS PR√ÅTICAS
# =======================
st.subheader("Desenvolvimento, valida√ß√£o e limita√ß√µes")
st.markdown("""
- **H2O AutoML** com m√∫ltiplos algoritmos; **GBM** escolhido pelo equil√≠brio AUC/AUCPR e menor falso-positivo.  
- **Valida√ß√£o k-fold (k=5)**; limiar calibrado com **F0.5** (prioriza **precis√£o**).  
- Limita√ß√µes: estudo **retrospectivo** de **centro √∫nico**; depend√™ncia de dados de prontu√°rio; aus√™ncia de vari√°veis pode carregar **informa√ß√£o impl√≠cita** (ex.: ECOG ausente).  
- √âtica/Equidade: modelos podem refletir **vieses**; uso **sob supervis√£o cl√≠nica**, com monitoramento e recalibra√ß√£o.
""")

st.subheader("Boas pr√°ticas de uso no pronto-socorro")
st.markdown("""
1. Utilize como **gatilho** para avalia√ß√£o de **Cuidados Paliativos** quando a probabilidade de **Baixa Sobrevida** exceder o limiar operacional.  
2. **Confirme** com exame cl√≠nico, hist√≥ria oncol√≥gica e prefer√™ncias do paciente/fam√≠lia.  
3. **Documente** decis√µes e plano de cuidado (controle de sintomas, conforto, comunica√ß√£o).  
4. **Monitore** m√©tricas locais (sens., esp., precis√£o, F0.5) e ajuste o limiar conforme a capacidade assistencial.
""")

st.caption("Material para **apoio √† decis√£o cl√≠nica** e educa√ß√£o. N√£o substitui o julgamento m√©dico individualizado.")